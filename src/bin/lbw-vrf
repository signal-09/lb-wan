#!/bin/bash

# load shared components
SCRIPT=$(realpath "${BASH_SOURCE[0]}")
LIBDIR=$(dirname "$SCRIPT")
COMMON="${LIBDIR}/common.sh"
source "$COMMON" && init || exit 255


# VOID setup(VOID): VOID
# initialize
setup() {
    debug "Starting in debug mode"
    set_status 'LOADING'
    setup_vrf_tables
    migrate_to_vrf
    forward_and_masq
}


# VOID cleanup(VOID): VOID
# cleanup on exit
cleanup() {
    trap - ERR
    set_status 'UNLOADING'
    local INTERFACES=$(awk '{ print $2 }' <<<"$WAN_CONF")

    # iptables
    debug "Cleaning iptables on exit"
    if bool "$IPTABLES"; then
        for INT in $INTERFACES; do
            log "Cleaning nat for interface ${INT}"
            cmd_no_fail iptables -t nat -D POSTROUTING ${LAN_NET:+-s $LAN_NET} -o $INT -j MASQUERADE
            if bool "$IPV6"; then
                cmd_no_fail ip6tables -t nat -D POSTROUTING -o $INT -j MASQUERADE
            fi
        done
    fi

    # networking
    debug "Cleaning networking on exit"
    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        local TABLE_NAME=${PROVIDER,,}
        for PRIORITY in $(ip rule show lookup "$TABLE_NAME" | awk -F: '{ print $1 }'); do
            cmd_no_fail ip rule del priority "$PRIORITY"
        done
        local LEASE_PID="${RUNSTATEDIR}/dhclient.${ETHERNET}.pid"
        local LEASE_CONF="${SYSCONFDIR}/dhcp/dhclient.${ETHERNET}.conf"
        if [[ -f "$LEASE_PID" ]]; then
            local PID=$(cat "$LEASE_PID")
            kill -0 $PID 2>/dev/null && kill -TERM $PID || :
            rm "$LEASE_PID"
        fi
        test -f "$LEASE_CONF" && rm -f "$LEASE_CONF" || :
        cmd_no_fail ip link set dev "$ETHERNET" nomaster
        cmd_no_fail ip link del dev "$TABLE_NAME"
        cmd_no_fail ip link set dev "$ETHERNET" down
        cmd_no_fail ip addr flush dev "$ETHERNET"
        cmd_no_fail ip route flush table "$TABLE_NAME"
        local RT_TABLE="/etc/iproute2/rt_tables.d/${TABLE_NAME}.conf"
        test -f "$RT_TABLE" && rm -f "$RT_TABLE" || :
        local STATS_FILE="${RUNSTATEDIR}/lbw-${ETHERNET}.stats"
        test -f "$STATS_FILE" && rm -f "$STATS_FILE" || :
        #if_up "$ETHERNET"
    done <<<"$WAN_CONF"
    cmd_no_fail ip rule del l3mdev priority 1000
    cmd_no_fail sysctl -w net.ipv4.tcp_l3mdev_accept=0
    cmd_no_fail sysctl -w net.ipv4.udp_l3mdev_accept=0
    if [[ "$LAN_INT" ]]; then
        cmd_no_fail sysctl -w net.ipv4.ip_forward="$IP_FORWARD"
    fi

    # WAN status files
    debug "Cleaning WAN status file on exit"
    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        clear_wan_status "$PROVIDER"
    done <<<"$WAN_CONF"

    clear_status
    exit
}
trap_pid
trap cleanup INT TERM


# VOID setup_vrf_tables(VOID): VOID
# creat VRF tables
setup_vrf_tables() {
    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        local TABLE_NAME=${PROVIDER,,}
        if ! grep -wq "${TABLE_NAME}\$" <<<"$RT_TABLES"; then
            local RT_TABLE="/etc/iproute2/rt_tables.d/${TABLE_NAME}.conf"
            local TABLE_INDEX=$(next_rt_table)
            echo -e "${TABLE_INDEX}\t${TABLE_NAME}" >"$RT_TABLE"
            RT_TABLES=$(read_rt_tables)
        fi
    done <<<"$WAN_CONF"
}


# VOID vrf_dhclient(VOID): VOID
# run dhcp client for ETHERNET under VRF
vrf_dhclient() {
    get_template 'dhclient.conf' >"$LEASE_CONF"
    set_eth_stats "$ETHERNET"
    cmd ip vrf exec "$TABLE_NAME" \
        dhclient \
            -cf "$LEASE_CONF" \
            -pf "$LEASE_PID" \
            -lf "$LEASE_FILE" \
            "$ETHERNET"
}

# VOID migrate_to_vrf(VOID): VOID
# enslave interfaces to VRF
migrate_to_vrf() {
    cmd_no_fail ip rule add l3mdev priority 1000
    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        local TABLE_NAME=${PROVIDER,,}

        # shutdown and clear interface
        if_down "$ETHERNET"

        # create VRF and routing table with same name
        cmd_no_fail ip link add dev "$TABLE_NAME" type vrf table "$TABLE_NAME"
        cmd ip link set dev "$TABLE_NAME" up

        # assign interface to VRF
        cmd ip link set dev "$ETHERNET" master "$TABLE_NAME"
        cmd ip link set dev "$ETHERNET" up

        # use lease file as input for local routing
        local LEASE_FILE="${RUNSTATEDIR}/dhclient.${ETHERNET}.leases"
        local LEASE_PID="${RUNSTATEDIR}/dhclient.${ETHERNET}.pid"
        local LEASE_CONF="${SYSCONFDIR}/dhcp/dhclient.${ETHERNET}.conf"
        test -f "$LEASE_FILE" && rm "$LEASE_FILE" || :

        vrf_dhclient
        local LEASE=$(get_last_lease "$LEASE_FILE")
        local LEASE_OPTIONS=$(get_lease_options "$LEASE")
        local GATEWAY=$(awk -F= '/routers/{ print $2 }' <<<"$LEASE_OPTIONS")
        cmd ip route replace default via "$GATEWAY" dev "$ETHERNET" table "$TABLE_NAME"

        # ensure VRF networks be routable from local network
        local NETWORKS=$(ip route show dev "$ETHERNET" scope link type unicast table "$TABLE_NAME" | awk '{ print $1 }')
        for NETWORK in $NETWORKS; do
            cmd ip rule add to "$NETWORK" table "$TABLE_NAME"
        done

        # ensure local network be routable from VRF
        if [[ "$LAN_NET" && "$LAN_INT" ]]; then
            cmd_no_fail ip route add "$LAN_NET" dev "$LAN_INT" scope link table "$TABLE_NAME"
        fi
    done <<<"$WAN_CONF"
}


# VOID forward_and_masq(VOID): VOID
# enable IP forwarding and NAT
forward_and_masq() {
    local INTERFACES=$(awk '{ print $2 }' <<<"$WAN_CONF")

    # forwarding from sysctl
    cmd sysctl -w net.ipv4.tcp_l3mdev_accept=1
    cmd sysctl -w net.ipv4.udp_l3mdev_accept=1
    if [[ "$LAN_INT" ]]; then
        IP_FORWARD=$(sysctl -n net.ipv4.ip_forward)
        cmd sysctl -w net.ipv4.ip_forward=1
        if bool "$IPV6"; then
            for INT in $LAN_INT $INTERFACES; do
                cmd sysctl -w "net.ipv6.conf.${INT}.forwarding=2"
                cmd sysctl -w "net.ipv6.conf.${INT}.disable_ipv6=0"
                cmd sysctl -w "net.ipv6.conf.${INT}.autoconf=1"
                cmd sysctl -w "net.ipv6.conf.${INT}.accept_ra=2"
            done
        fi
    fi

    if bool "$IPTABLES"; then
        # forwarding from iptables
        if [[ "$LAN_INT" ]]; then
            IPTABLES_FORWARD=$(iptables -S | awk '/FORWARD/{ print $3 }')
            cmd iptables -P FORWARD ACCEPT
            if bool "$IPV6"; then
                IP6TABLES_FORWARD=$(ip6tables -S | awk '/FORWARD/{ print $3 }')
                cmd ip6tables -P FORWARD ACCEPT
            fi
        fi

        # masquerade from every interfaces
        for INT in $INTERFACES; do
            log "Natting interface ${INT}${LAN_NET:+" from $LAN_NET"}"
            local RULE="POSTROUTING ${LAN_NET:+-s $LAN_NET} -o $INT -j MASQUERADE"
            ( iptables-save -t nat | grep -q -- "$RULE" ) || cmd iptables -t nat -A $RULE
            if bool "$IPV6"; then
                RULE="POSTROUTING -o $INT -j MASQUERADE"
                ( ip6tables-save -t nat | grep -q -- "$RULE" ) || cmd ip6tables -t nat -A $RULE
            fi
        done
    fi
}


# INT rtt_ping(PROVIDER, TARGET): RTT
# stdout RTT of TARGET ping under PROVIDER VRF
rtt_ping() {
    local PROVIDER=$1
    local TARGET=$2

    ip vrf exec "${PROVIDER,,}" ping -4 -q -c1 -n -W${PING_TIMEOUT} ${TARGET} 2>/dev/null | awk -F/ '/^rtt/{ print $5 }'
}


# VOID check_connectivity(PROVIDER, TARGETS): VOID
# write PROVIDER status file based on TARGETS reachability
check_connectivity() {
    local PROVIDER=$1
    local TARGETS=$2
    local REACHED=false

    # check for reachability
    for TGT in ${TARGETS//,/ }; do
        if RTT=$(rtt_ping ${PROVIDER} ${TGT}); then
            REACHED=true
            break
        fi
    done

    # get last connection status
    read LOSS OLD_RTT OLD_STATE < <(get_wan_status "$PROVIDER")
    debug "${PROVIDER}: LOSS=${LOSS} RTT=${OLD_RTT} STATE=${OLD_STATE}"

    # adapt status value
    if [[ $REACHED == true ]]; then
        if [[ $LOSS -gt 0 ]]; then
            LOSS=$[LOSS - 1]
            STATE=$OLD_STATE
        else
            STATE='UP'
        fi
    else
        if [[ $LOSS -lt $MAX_PACKET_LOSS ]]; then
            LOSS=$[LOSS + 1]
            STATE=$OLD_STATE
        else
            STATE='DOWN'
        fi
    fi

    # save status
    log "Declaring ${PROVIDER} ${STATE}" when test "$STATE" != "$OLD_STATE"
    set_wan_status "$PROVIDER" "$LOSS" "$RTT" "$STATE"
}


# VOID run(VOID): VOID
# main function
run() {
    declare -A OLD_GATEWAY
    declare -A OLD_ROUTES

    set_status 'RUNNING'
    while sleep $CHECK_INTERVAL; do
        while read PROVIDER ETHERNET WEIGHT PING_IPS; do
            local TABLE_NAME=${PROVIDER,,}
            local ROUTES=$(ip -4 route show table "$TABLE_NAME")
            local GATEWAY=$(awk '/^default/{ print $3 }' <<<"$ROUTES")
            if [[ -z "$GATEWAY" ]]; then
                # FIXME: sometimes the default gateway disappear... why?
                local LEASE_FILE="${RUNSTATEDIR}/dhclient.${ETHERNET}.leases"
                local LEASE=$(get_last_lease "$LEASE_FILE")
                local LEASE_OPTIONS=$(get_lease_options "$LEASE")
                GATEWAY=$(awk -F= '/routers/{ print $2 }' <<<"$LEASE_OPTIONS")
                [[ "$GATEWAY" != "${OLD_GATEWAY[$PROVIDER]}" || "$ROUTES" != "${OLD_ROUTES[$PROVIDER]}" ]] || continue
                log "Reapply default route for ${PROVIDER} via ${GATEWAY}"
                if cmd_no_fatal ip route add default via "$GATEWAY" dev "$ETHERNET" table "$TABLE_NAME"; then
                    unset OLD_GATEWAY[$PROVIDER]
                    unset OLD_ROUTES[$PROVIDER]
                else
                    warn "$ROUTES"
                    OLD_GATEWAY[$PROVIDER]="$GATEWAY"
                    OLD_ROUTES[$PROVIDER]="$ROUTES"
                fi
            fi
            check_connectivity $PROVIDER $PING_IPS &
        done <<<"$WAN_CONF"
    done
}


setup
run
cleanup

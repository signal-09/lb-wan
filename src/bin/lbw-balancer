#!/bin/bash

# load shared components
SCRIPT=$(realpath "${BASH_SOURCE[0]}")
LIBDIR=$(dirname "$SCRIPT")
COMMON="${LIBDIR}/common.sh"
source "$COMMON" && init || exit 255


# VOID setup(VOID): VOID
# initialize
setup() {
    log "Setup..."
    debug "Starting in debug mode"
    set_status 'LOADING'
}


# VOID cleanup(VOID): VOID
# cleanup on exit
cleanup() {
    log "Cleanup..."
    trap - ERR
    debug "Cleaning default route on exit"
    cmd_no_fail ip route delete default scope global
    clear_status
    exit
}
trap_pid
trap cleanup INT TERM


# VOID get_nexthops(IP): NEXTHOPS
# stdout nexthops for active WANs
# WARN: do not subshell (e.g. `NH=$(get_nexthops -4)`), use assign instead
# (e.g. `assign NH=get_nexthops -4`) to prevent loss of global variable changes
declare -A PROVIDER_ROUTES
get_nexthops() {
    [[ $BASH_SUBSHELL -eq 0 ]] || internal_error 255 "\'get_nexthops' called using subshell"
    local IP="${1:--4}"
    local PROVIDER ETHERNET WEIGHT PING_IPS ENABLED
    while read PROVIDER ETHERNET WEIGHT PING_IPS ENABLED; do
        bool "${ENABLED:-true}" || continue
        local TABLE_NAME=${PROVIDER,,}
        read LOSS RTT STATE < <(get_wan_status "$PROVIDER")
        if [[ "$STATE" == UP ]]; then
            local ROUTES=$(ip "$@" route show dev "$ETHERNET" table "$TABLE_NAME" | sed -e 's/ expires \d*\w*//')
            local GATEWAY=$(awk '/^default/{ print $3 }' <<<"$ROUTES" | head -1)
            if [[ "$GATEWAY" ]]; then
                echo "nexthop via ${GATEWAY} dev ${ETHERNET} weight ${WEIGHT}"
            fi
            if [[ "$ROUTES" != "${PROVIDER_ROUTES[$PROVIDER$IP]}" ]]; then
                PROVIDER_ROUTES[$PROVIDER$IP]="$ROUTES"
                if [[ -z "$GATEWAY" ]]; then
                    warn "No default route found for ${PROVIDER} (IP${IP/-/v})"
                    debug "$ROUTES"
                fi
            fi
        fi
    done <<<"$WAN_CONF"
}


# INT check_service(SERVICE*): VOID
# check if specific lbw-SERVICE is running
check_service() {
    local ERR=0

    for SERVICE; do
        declare -n OLD="OLD_${SERVICE^^}_STATUS"
        declare -n NEW="NEW_${SERVICE^^}_STATUS"

        NEW=$(get_status "lbw-${SERVICE,,}")
        if [[ "$NEW" != "$OLD" ]]; then
            debug "${SERVICE} status changed from ${OLD} to ${NEW}"
            warn "${SERVICE} service not available" when test "${NEW}" != 'RUNNING'
            log "${SERVICE} service become available" when test "${NEW}" == 'RUNNING'
            OLD="$NEW"
        fi

        test "$NEW" == 'RUNNING' || ERR=$[ERR+$?]
    done

    return $ERR
}


# VOID run(VOID): VOID
# main function
run() {
    local ROUTES ROUTES_IPV6
    local OLD_ROUTES OLD_DEFAULT
    local OLD_ROUTES_IPV6 OLD_DEFAULT_IPV6
    local NEW_VRF_STATUS OLD_VRF_STATUS='UNKNOWN'
    local NEW_MONITOR_STATUS OLD_MONITOR_STATUS='UNKNOWN'

    log "Run..."
    set_status 'RUNNING'
    while sleep $CHECK_INTERVAL; do
        check_service 'VRF' || continue

        assign -a ROUTES=get_nexthops -4
        local NEW_ROUTES="${ROUTES[@]}"
        local NEW_DEFAULT=$(ip -4 route show default scope global)

        if [[ "$NEW_ROUTES" != "$OLD_ROUTES" || "$NEW_DEFAULT" != "$OLD_DEFAULT" ]]; then
            if [[ "$NEW_ROUTES" ]]; then
                log "Set default route for IPv4 to $NEW_ROUTES"
                cmd ip route replace default scope global $NEW_ROUTES
            else
                warn "No WAN detected for IPv4: removing default route"
                cmd_no_fail ip route delete default scope global
            fi
            debug "$(diff --label 'old routes' --label 'new routes' -u <(echo "$OLD_ROUTES") <(echo "$NEW_ROUTES") || :)"
            debug "$(diff --label 'old default' --label 'new default' -u <(echo "$OLD_DEFAULT") <(echo "$NEW_DEFAULT") || :)"
            OLD_ROUTES=$NEW_ROUTES
            OLD_DEFAULT=$(ip -4 route show default scope global)
        fi

        if bool "$IPV6"; then
            assign -a ROUTES_IPV6=get_nexthops -6
            local NEW_ROUTES_IPV6="${ROUTES_IPV6[@]}"
            local NEW_DEFAULT_IPV6=$(ip -6 route show default scope global)

            if [[ "$NEW_ROUTES_IPV6" != "$OLD_ROUTES_IPV6" || "$NEW_DEFAULT_IPV6" != "$OLD_DEFAULT_IPV6" ]]; then
                if [[ "$NEW_ROUTES_IPV6" ]]; then
                    log "Set default route for IPv6 to $NEW_ROUTES_IPV6"
                    cmd ip -6 route replace default scope global $NEW_ROUTES_IPV6
                else
                    warn "No WAN detected for IPv6, removing default route"
                    cmd_no_fail ip -6 route delete default scope global
                fi
                debug "$(diff --label 'old IPv6 routes' --label 'new IPv6 routes' -u <(echo "$OLD_ROUTES_IPV6") <(echo "$NEW_ROUTES_IPV6") || :)"
                debug "$(diff --label 'old IPv6 default' --label 'new IPv6 default' -u <(echo "$OLD_DEFAULT_IPV6") <(echo "$NEW_DEFAULT_IPV6") || :)"
                OLD_ROUTES_IPV6=$NEW_ROUTES_IPV6
                OLD_DEFAULT_IPV6=$(ip -6 route show default scope global)
            fi
        fi
    done
}


setup
run
cleanup

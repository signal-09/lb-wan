#!/bin/bash

# load shared components
SCRIPT=$(realpath "$0")
LIBDIR=$(dirname "$SCRIPT")
COMMON="${LIBDIR}/common.sh"
source "$COMMON" || exit 255


# delete balanced routes
cleanup() {
    debug "Cleaning default route on exit"
    cmd_no_fail ip route delete default scope global
    exit
}
trap_pid
trap cleanup INT TERM


get_nexthops() {
    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        local TABLE_NAME=${PROVIDER,,}
        read LOSS RTT STATE < <(get_wan_status "$PROVIDER")
        if [[ "$STATE" == UP ]]; then
            local ROUTES=$(ip "$@" route show dev "$ETHERNET" table "$TABLE_NAME")
            local GATEWAY=$(awk '/^default/{ print $3 }' <<<"$ROUTES" | head -1)
            if [[ "$GATEWAY" ]]; then
                echo "nexthop via ${GATEWAY} dev ${ETHERNET} weight ${WEIGHT}"
            elif ! [[ "$@" =~ -6 ]]; then
                warn "No default route found for ${PROVIDER}"
                debug "$ROUTES"
            fi
        fi
    done <<<"$WAN_CONF"
}


setup() {
    debug "Starting in debug mode"
}


check_service() {
    local ERR=0

    for SERVICE; do
        declare -n OLD="OLD_${SERVICE^^}_STATUS"
        declare -n NEW="NEW_${SERVICE^^}_STATUS"

        NEW=$(get_status "lbw-${SERVICE,,}")
        if [[ "$NEW" != "$OLD" ]]; then
            debug "${SERVICE} status changed from ${OLD} to ${NEW}"
            test "${OLD}" == 'RUNNING' && warn "${SERVICE} service not available" || :
            test "${NEW}" == 'RUNNING' && log "${SERVICE} service become available" || :
            OLD="$NEW"
        fi

        test "$NEW" == 'RUNNING' || ERR=$[ERR+$?]
    done

    return $ERR
}


main() {
    local OLD_ROUTES OLD_DEFAULT
    local OLD_ROUTES_IPV6 OLD_DEFAULT_IPV6
    local NEW_VRF_STATUS OLD_VRF_STATUS='UNKNOWN'
    local NEW_MONITOR_STATUS OLD_MONITOR_STATUS='UNKNOWN'

    while sleep $CHECK_INTERVAL; do
        check_service 'VRF' || continue

        local ROUTES=($(get_nexthops -4))
        local NEW_ROUTES="${ROUTES[@]}"
        local NEW_DEFAULT=$(ip -4 route show default scope global)

        if [[ "$NEW_ROUTES" != "$OLD_ROUTES" || "$NEW_DEFAULT" != "$OLD_DEFAULT" ]]; then
            if [[ "$NEW_ROUTES" ]]; then
                log "Set default route for IPv4 to $NEW_ROUTES"
                cmd ip route replace default scope global $NEW_ROUTES
            else
                warn "No WAN detected for IPv4: removing default route"
                cmd_no_fail ip route delete default scope global
            fi
            debug "$(diff --label 'old routes' --label 'new routes' -u <(echo "$OLD_ROUTES") <(echo "$NEW_ROUTES") || :)"
            debug "$(diff --label 'old default' --label 'new default' -u <(echo "$OLD_DEFAULT") <(echo "$NEW_DEFAULT") || :)"
            OLD_ROUTES=$NEW_ROUTES
            OLD_DEFAULT=$(ip -4 route show default scope global)
        fi

        if bool "$IPV6"; then
            local ROUTES_IPV6=($(get_nexthops -6))
            local NEW_ROUTES_IPV6="${ROUTES_IPV6[@]}"
            local NEW_DEFAULT_IPV6=$(ip -6 route show default scope global)

            if [[ "$NEW_ROUTES_IPV6" != "$OLD_ROUTES_IPV6" || "$NEW_DEFAULT_IPV6" != "$OLD_DEFAULT_IPV6" ]]; then
                if [[ "$NEW_ROUTES_IPV6" ]]; then
                    log "Set default route for IPv6 to $NEW_ROUTES_IPV6"
                    cmd ip -6 route replace default scope global $NEW_ROUTES_IPV6
                else
                    warn "No WAN detected for IPv6, removing default route"
                    cmd_no_fail ip -6 route delete default scope global
                fi
                debug "$(diff --label 'old IPv6 routes' --label 'new IPv6 routes' -u <(echo "$OLD_ROUTES_IPV6") <(echo "$NEW_ROUTES_IPV6") || :)"
                debug "$(diff --label 'old IPv6 default' --label 'new IPv6 default' -u <(echo "$OLD_DEFAULT_IPV6") <(echo "$NEW_DEFAULT_IPV6") || :)"
                OLD_ROUTES_IPV6=$NEW_ROUTES_IPV6
                OLD_DEFAULT_IPV6=$(ip -6 route show default scope global)
            fi
        fi
    done
}


setup
main
cleanup

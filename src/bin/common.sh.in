#!/bin/bash

# load variables
[[ -f @sysconfdir@/default/lb-wan ]] && source @sysconfdir@/default/lb-wan

# set default values
: ${CHECK_INTERVAL:=3}
: ${PING_TIMEOUT:=2}
: ${MAX_PACKET_LOSS:=5}
: ${NETWORKING:=auto}
: ${WAN_BALANCER_CONF:='@sysconfdir@/lb-wan.conf'}
: ${RUN_STATE:='@runstatedir@'}


# print error message then exit
error() { echo "ERROR: $@" 1>&2; exit 255; }


# prin warning message
warn() { echo "WARNING: $@" 1>&2; }


get_lb_status() {
    if [[ -f "${RUN_STATE}/lb-wan.status" ]]; then
        cat "${RUN_STATE}/lb-wan.status"
    else
        echo "STOPPED"
    fi
}


get_wan_status() {
    local PROVIDER=${1,,}
    local STATUS_FILE="${RUN_STATE}/lb_${PROVIDER}.status"

    if [[ -f "$STATUS_FILE" ]]; then
        cat "$STATUS_FILE"
    else
        echo "$MAX_PACKET_LOSS - DOWN"
    fi
}


set_wan_status() {
    local PROVIDER=${1,,}
    local LOSS=${2:-$MAX_PACKET_LOSS}
    local RTT=${3:--}
    local STATE=${4:-DOWN}
    local STATUS_FILE="${RUN_STATE}/lb_${PROVIDER}.status"

    echo -e "${LOSS}\t${RTT}\t${STATE}" >"$STATUS_FILE"
}


get_next_rule_priority() {
    PRIORITY=$(ip rule show | tail -1 | awk -F: '{ print $1 }')
    echo $[PRIORITY + 1]
}


read_rt_tables() {
    grep -Ehv '^$|^#' /etc/iproute2/rt_tables /etc/iproute2/rt_tables.d/*.conf 2>/dev/null | \
        sort -u | \
        awk '{ print $1 " " $2 }'
}


next_rt_table() {
    local INDEX=0

    while read TABLE NAME; do
        [[ $TABLE -ge 253 || $TABLE -gt $INDEX ]] && break
        INDEX=$[TABLE + 1]
    done <<<"$RT_TABLES"

    echo "$INDEX"
}


# check if interface is managed by the tool
if_managed() {
    local ETHERNET="$1"

    case "$NETWORKING" in
    'ifupdown') ( ifquery -l | grep -q "^${ETHERNET}$" ) && echo "$NETWORKING" || echo 'manual';;
    'netplan') [[ $(netplan get "ethernets.${ETHERNET}") != 'null' ]] && echo "$NETWORKING" || echo 'manual';;
    *) echo 'manual';;
    esac
}


# bring up ineterface
if_up() {
    local ETHERNET="$1"
    local NETWORKING=$(if_managed "$ETHERNET")

    case "$NETWORKING" in
    'ifupdown') ifup "$ETHERNET";;
    'netplan')
        # TODO:
        # netplan get "ethernets.${ETHERNET}"
        # create /tmp/custom/etc/netplan
        # netplan apply --state /tmp/custom ???
        ;;
    'manual') warn "Unable to bring up ${ETHERNET} if NETWORKING='manual'";;
    esac
}


# bring down ineterface
if_down() {
    local ETHERNET="$1"
    local NETWORKING=$(if_managed "$ETHERNET")

    case "$NETWORKING" in
    'ifupdown') ifdown "$ETHERNET";;
    'netplan'|'manual')
        ip link set dev "$ETHERNET" down
        ip addr flush dev "$ETHERNET"
        ;;
    esac
}


# load config file
if [[ -f "$WAN_BALANCER_CONF" ]]; then
    WAN_CONF=$(grep -vE '^$|^#|^LAN' "$WAN_BALANCER_CONF")
    if ! [[ "$WAN_CONF" ]]; then
        error "Config file \`${WAN_BALANCER_CONF}' is empty"
    fi
    LAN_INT=$(awk '/^LAN[[:space:]]/{ print $2 }' "$WAN_BALANCER_CONF")
    [[ "$LAN_INT" ]] && LAN_NET=$(ip route show dev $LAN_INT scope link | awk '{ print $1 }')
else
    error "Config file \`${WAN_BALANCER_CONF}' not present"
fi


# identify networking
if [[ "$NETWORKING" == 'auto' ]]; then
    if [[ -f /etc/network/interfaces && $(type -ft ifquery) == 'file' ]] && ifquery --state &>/dev/null; then
        NETWORKING=ifupdown
    elif [[ -d /etc/netplan && $(type -ft netplan) == 'file' ]] && netplan status &>/dev/null; then
        NETWORKING=netplan
    fi
fi
if [[ "$NETWORKING" == 'ifupdown' ]]; then
    [[ $(type -ft ifquery) == 'file' ]] || error "\`ifupdown' tool not found, change NETWORKING in /etc/default/lb-wan.conf"
    ifquery --state &>/dev/null || error "\`ifupdown' not configured"
elif [[ "$NETWORKING" == 'netplan' ]]; then
    [[ $(type -ft netplan) == 'file' ]] || error "\`netplan' tool not found, change NETWORKING in /etc/default/lb-wan.conf"
    netplan status &>/dev/null || error "\`netplan' not configured"
elif [[ "$NETWORKING" != 'manual' ]]; then
    error "Unsupported network configuration tool"
fi

# load rt_tables
RT_TABLES=$(read_rt_tables)

# check for packet forwarding
IP_FORWARD=$(sysctl -n net.ipv4.ip_forward)
IPV6_FORWARD=$(sysctl -n net.ipv6.conf.all.forwarding)
IPTABLES_FORWARD=$(iptables -t filter -S | awk '/^-P FORWARD/{ print $3 }')
[[ $IP_FORWARD -ne 1 ]] && warn "Packet forwarding not enabled"
[[ "$IPTABLES_FORWARD" != 'ACCEPT' ]] && warn "Filtered iptables forwarding"

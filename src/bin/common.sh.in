#!/bin/bash

__SOURCE__=$(realpath "$0")
__DIR__=$(dirname "$__SOURCE__")
__COMMAND__=$(basename "$__SOURCE__")

# load variables
test -f '@sysconfdir@/default/lb-wan' && source '@sysconfdir@/default/lb-wan' || :

# set default values
: ${DEBUG:=''}
: ${CHECK_INTERVAL:=3}
: ${PING_TIMEOUT:=2}
: ${MAX_PACKET_LOSS:=5}
: ${NETWORKING:=auto}
: ${IPTABLES:=yes}
: ${IPV6:=no}
: ${DATE_FORMAT:='%b %d %X'}
: ${SYSCONFDIR:='@sysconfdir@'}
: ${RUNSTATEDIR:='@runstatedir@'}
: ${WAN_BALANCER_CONF:="${SYSCONFDIR}/lb-wan.conf"}
: ${PID_FILE:="${RUNSTATEDIR}/${__COMMAND__}.pid"}
: ${TRACE_FILE:="${RUNSTATEDIR}/${__COMMAND__}.trace"}


# avoid errors in file expansion
shopt -s nullglob

# TTY colors
test ! -t 1 || declare -A COLOR=(
    [BLACK]='\033[0;30m'
    [RED]='\033[0;31m'
    [GREEN]='\033[0;32m'
    [BROWN]='\033[0;33m'
    [ORANGE]='\033[0;33m'
    [BLUE]='\033[0;34m'
    [PURPLE]='\033[0;35m'
    [CYAN]='\033[0;36m'
    [LIGHT_GRAY]='\033[0;37m'
    [DARK_GRAY]='\033[1;30m'
    [LIGHT_RED]='\033[1;31m'
    [LIGHT_GREEN]='\033[1;32m'
    [YELLOW]='\033[1;33m'
    [LIGHT_BLUE]='\033[1;34m'
    [LIGHT_PURPLE]='\033[1;35m'
    [LIGHT_CYAN]='\033[1;36m'
    [WHITE]='\033[1;37m'
    [RESET]='\033[0m'
)


# print messages to syslog or stderr if run in terminal
test ! -t 0 || logger() {
    local LEVEL="$5"
    local STAMP START END
    local LINE="$6"

    if test -t 2; then
        if [[ "$LEVEL" == 'crit' ]]; then
            START="${COLOR[LIGHT_RED]}"
            END="${COLOR[RESET]}"
        elif [[ "$LEVEL" == 'warning' ]]; then
            START="${COLOR[YELLOW]}"
            END="${COLOR[RESET]}"
        elif [[ "$LEVEL" == 'debug' ]]; then
            START="${COLOR[DARK_GRAY]}"
            END="${COLOR[RESET]}"
        fi
    fi

    test -z "$TIMESTAMP" || STAMP="$(date "+${DATE_FORMAT}") ${__COMMAND__}[$$]: "
    echo -e "${STAMP}${START}${LINE}${END}"
}


# syslog wrapper
syslog() {
    local LEVEL="$1"
    shift
    for MESSAGE; do
        test -n "$MESSAGE" || continue
        while IFS='' read -r LINE; do
            logger --id=$$ -t "$__COMMAND__" -p "$LEVEL" "$LINE"
        done <<<"$MESSAGE"
    done
}


# logging messages
fatal() { syslog 'crit' "$@"; exit 255; }
error() { syslog 'crit' "$@"; }
warn() { syslog 'warning' "$@"; }
log() { syslog 'notice' "$@"; }
debug() { test -z "$DEBUG" || syslog 'debug' "$@"; }


# track errors with line and command
set -o errtrace -o errexit -o pipefail -o functrace
internal_error() {
    local _ERR=$1
    local _BASH_COMMAND="${2:-$BASH_COMMAND}"
    local _TRACEBACK=('Traceback:')

    for ((i=${#BASH_SOURCE[@]}-2; i>=0; i--)); do
        _TRACEBACK+=("  File \"${BASH_SOURCE[i+1]}\", line ${BASH_LINENO[i]}, in ${FUNCNAME[i+1]}")
    done
    _TRACEBACK+=(
        "    Command: ${_BASH_COMMAND}"
        "    Exit code: ${_ERR}"
    )
    error "${_TRACEBACK[@]}"
}
trap 'internal_error $?' ERR


# exec command and log
cmd() {
    local _ERR=0
    local CMD=$1
    local ARGS=''
    local STDOUT STDERR

    # FIXME: is there a better method to preserve original quotes?
    shift
    for ARG in ${*@Q}; do
        [[ "$ARG" =~ ' ' ]] || ARG=${ARG:1:-1} && ARGS+=" ${ARG}"
    done
    debug "Executing: ${CMD}${ARGS}"

    # redirect STDOUT/STDERR to variables for logging
    exec 4<><(:) 5<><(:)
    $CMD "$@" 1>&4 2>&5 || _ERR=$?
    printf '\0' 1>&4
    printf '\0' 1>&5
    read -r -d '' -u 4 STDOUT
    read -r -d '' -u 5 STDERR
    exec 4>&- 5>&-

    log "$STDOUT"
    if [[ $_ERR -eq 0 || "$NO_FAIL" ]]; then
        warn "$STDERR"
    else
        error "$STDERR"
        trap "internal_error $_ERR '${CMD}${ARGS}'" ERR
    fi

    return $_ERR
}
cmd_no_fail() {
    NO_FAIL=1 cmd "$@" || :
}


# register and remove our presence in a PID file
trap_pid() {
    local PID
    if [[ -f "$PID_FILE" ]]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" &>/dev/null; then
            fatal "${__COMMAND__}[${PID}]: already running"
        else
            warn "Replacing dead process ${__COMMAND__}[${PID}]"
        fi
    fi
    echo "$$" >"$PID_FILE" && trap "rm -f '${PID_FILE}'" EXIT
}


bool() {
    case "${1,,}" in
    '1'|'yes'|'true') return 0;;
    '0'|'no'|'false') return 1;;
    *) fatal "Boolean value \`${1}' not allowed";;
    esac
}


set_status() {
    local STATUS_FILE="${RUNSTATEDIR}/${__COMMAND__}.status"

    echo "$1" >"$STATUS_FILE"
}


get_status() {
    local STATUS_FILE="${RUNSTATEDIR}/${1:-$__COMMAND__}.status"

    if [[ -f "$STATUS_FILE" ]]; then
        cat "$STATUS_FILE"
    else
        echo 'STOPPED'
    fi
}


clear_status() {
    rm -f "${RUNSTATEDIR}/${__COMMAND__}.status"
}


get_wan_status() {
    local PROVIDER=${1,,}
    local STATUS_FILE="${RUNSTATEDIR}/lb_${PROVIDER}.status"

    if [[ -f "$STATUS_FILE" ]]; then
        cat "$STATUS_FILE"
    else
        echo -e "${MAX_PACKET_LOSS}\t-\tDOWN"
    fi
}


set_wan_status() {
    local PROVIDER=${1,,}
    local LOSS=${2:-$MAX_PACKET_LOSS}
    local RTT=${3:--}
    local STATE=${4:-DOWN}
    local STATUS_FILE="${RUNSTATEDIR}/lb_${PROVIDER}.status"

    # to avoid empty file read, first write then move
    echo -e "${LOSS}\t${RTT}\t${STATE}" >"${STATUS_FILE}.tmp"
    mv -f "${STATUS_FILE}.tmp" "$STATUS_FILE"
}


clear_wan_status() {
    local PROVIDER=${1,,}
    local STATUS_FILE="${RUNSTATEDIR}/lb_${PROVIDER}.status"

    test -f "$STATUS_FILE" && rm -f "$STATUS_FILE" || :
}


get_next_rule_priority() {
    PRIORITY=$(ip rule show | tail -1 | awk -F: '{ print $1 }')
    echo $[PRIORITY + 1]
}


get_last_lease() {
    local LEASE_FILE="$1"

    sed -e ':a;N;$!ba;s/\([{;]\)\n */\1/g' "$LEASE_FILE" \
    | sed -e 's/^lease {//' -e 's/;}$//' \
    | tail -1 \
    | tr ';' '\n'
}


get_lease_options() {
    local LEASE="$1"

    awk '/option/{ print $2 "=" $3 }' <<<"$LEASE"
}


get_template() {
    local TEMPLATE="/usr/libexec/lb-wan/templates/${1}.in"
    test -f "$TEMPLATE" || fatal "Template file for \`${1}' not found"
    TEMPLATE="$(cat "$TEMPLATE")"
    echo "${TEMPLATE@P}"
}


get_nameservers() {
    local ETHERNET="$1"

    case "$NETWORKING" in
    'ifupdown')
        ifquery "$ETHERNET" | awk -F': ' '/^dns-nameserver/{ print $2 }'
        ;;
    esac
}


read_rt_tables() {
    grep -Ehv '^$|^#' /etc/iproute2/rt_tables /etc/iproute2/rt_tables.d/*.conf 2>/dev/null \
    | sort -u \
    | awk '{ print $1 " " $2 }'
}


next_rt_table() {
    local INDEX=0

    while read TABLE NAME; do
        test $TABLE -lt 253 -a $TABLE -le $INDEX || break
        INDEX=$[TABLE + 1]
    done <<<"$RT_TABLES"

    echo "$INDEX"
}


# check if interface is managed by the tool
if_managed() {
    local ETHERNET="$1"

    case "$NETWORKING" in
    'ifupdown') ( ifquery -l | grep -q "^${ETHERNET}$" ) && echo "$NETWORKING" || echo 'manual';;
    'netplan') test $(netplan get "ethernets.${ETHERNET}") != 'null' && echo "$NETWORKING" || echo 'manual';;
    *) echo 'manual';;
    esac
}


# bring up ineterface
if_up() {
    local ETHERNET="$1"
    local NETWORKING=$(if_managed "$ETHERNET")

    case "$NETWORKING" in
    'ifupdown') cmd ifup "$ETHERNET";;
    'netplan')
        # TODO:
        # netplan get "ethernets.${ETHERNET}"
        # create /tmp/custom/etc/netplan
        # netplan apply --state /tmp/custom ???
        ;;
    'manual') warn "Unable to bring up ${ETHERNET} if NETWORKING='manual'";;
    esac
}


# bring down ineterface
if_down() {
    local ETHERNET="$1"
    local NETWORKING=$(if_managed "$ETHERNET")

    case "$NETWORKING" in
    'ifupdown') cmd ifdown "$ETHERNET";;
    'netplan'|'manual')
        cmd ip link set dev "$ETHERNET" down
        cmd ip addr flush dev "$ETHERNET"
        ;;
    esac
}


stdout_to_var() {
    local VAR="$1"
    local FUNCTION="$2"
    shift 2

    # FIXME: https://www.reddit.com/r/bash/comments/135mdqt/no_redirect_to_variable/
    # Is there something better to avoid subshell and preserve variables changes?
    exec 4<><(:)
    {
        $FUNCTION "$@"
        printf '\0'
    } 1>&4
    read -r -d '' -u 4 -a $VAR
    exec 4>&-
}


# enable tracing to file
if [[ "$TRACE" ]]; then
    eval "exec ${TRACE}>'${TRACE_FILE}'"
    BASH_XTRACEFD=$TRACE
    set -o xtrace
fi


# avoid multiple instances
if PID=$(pidof -o $$ "$__COMMAND__"); then
    fatal "${__COMMAND__}[${PID// /,}]: already running"
fi


# identify networking
if [[ "$NETWORKING" == 'auto' ]]; then
    if [[ -f /etc/network/interfaces && $(type -ft ifquery) == 'file' ]] && ifquery --state &>/dev/null; then
        NETWORKING=ifupdown
    elif [[ -d /etc/netplan && $(type -ft netplan) == 'file' ]] && netplan status &>/dev/null; then
        NETWORKING=netplan
    fi
fi
if [[ "$NETWORKING" == 'ifupdown' ]]; then
    test $(type -ft ifquery) == 'file' || fatal "\`ifupdown' tool not found, change NETWORKING in /etc/default/lb-wan.conf"
    ifquery --state &>/dev/null || fatal "\`ifupdown' not configured"
elif [[ "$NETWORKING" == 'netplan' ]]; then
    test $(type -ft netplan) == 'file' || fatal "\`netplan' tool not found, change NETWORKING in /etc/default/lb-wan.conf"
    netplan status &>/dev/null || fatal "\`netplan' not configured"
elif [[ "$NETWORKING" != 'manual' ]]; then
    fatal "Unsupported network configuration tool"
fi


# load config file
if [[ -f "$WAN_BALANCER_CONF" ]]; then
    WAN_CONF=$(grep -vE '^$|^#|^LAN' "$WAN_BALANCER_CONF")
    if ! [[ "$WAN_CONF" ]]; then
        fatal "Config file \`${WAN_BALANCER_CONF}' is empty"
    fi
    LAN_INT=$(awk '/^LAN[[:space:]]/{ print $2 }' "$WAN_BALANCER_CONF")
    if [[ "$LAN_INT" ]]; then
        LAN_NET=$(ip route show dev "$LAN_INT" scope link | awk '{ print $1 }')
        LAN_DNS=($(get_nameservers "$LAN_INT"))
    fi
else
    fatal "Config file \`${WAN_BALANCER_CONF}' not present"
fi


# normalize DNS
: ${NAMESERVERS:="${LAN_DNS[@]}"}
: ${NAMESERVERS:='8.8.8.8,8.8.4.4'}
NAMESERVERS=($(tr ':;,' ' ' <<<"$NAMESERVERS"))
NAMESERVERS="${NAMESERVERS[@]}"
NAMESERVERS="${NAMESERVERS// /, }"

# load rt_tables
RT_TABLES=$(read_rt_tables)

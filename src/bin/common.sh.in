#!/bin/bash

__SOURCE__=$(realpath "$0")
__DIR__=$(dirname "$__SOURCE__")
__COMMAND__=$(basename "$__SOURCE__")

# load variables
test -f '@sysconfdir@/default/lb-wan' && source '@sysconfdir@/default/lb-wan' || :

# set default values
: ${DEBUG:=''}
: ${CHECK_INTERVAL:=3}
: ${PING_TIMEOUT:=2}
: ${MAX_PACKET_LOSS:=5}
: ${NETWORKING:=auto}
: ${IPTABLES:=yes}
: ${IPV6:=no}
: ${DATE_FORMAT:='%b %d %X'}
: ${SYSCONFDIR:='@sysconfdir@'}
: ${RUNSTATEDIR:='@runstatedir@'}
: ${WAN_BALANCER_CONF:="${SYSCONFDIR}/lb-wan.conf"}
: ${PID_FILE:="${RUNSTATEDIR}/${__COMMAND__}.pid"}
: ${TRACE_FILE:="${RUNSTATEDIR}/${__COMMAND__}.trace"}


# avoid errors in file expansion
shopt -s nullglob

# TTY colors
test ! -t 1 || declare -A COLOR=(
    [BLACK]='\033[0;30m'
    [RED]='\033[0;31m'
    [GREEN]='\033[0;32m'
    [BROWN]='\033[0;33m'
    [ORANGE]='\033[0;33m'
    [BLUE]='\033[0;34m'
    [PURPLE]='\033[0;35m'
    [CYAN]='\033[0;36m'
    [LIGHT_GRAY]='\033[0;37m'
    [DARK_GRAY]='\033[1;30m'
    [LIGHT_RED]='\033[1;31m'
    [LIGHT_GREEN]='\033[1;32m'
    [YELLOW]='\033[1;33m'
    [LIGHT_BLUE]='\033[1;34m'
    [LIGHT_PURPLE]='\033[1;35m'
    [LIGHT_CYAN]='\033[1;36m'
    [WHITE]='\033[1;37m'
    [RESET]='\033[0m'
)


# VOID stderr(ARGS*): VOID
# stderr ARGS*
stderr() {
    echo -e "$@" 1>&2
}


# print messages to syslog or stderr if run in terminal
test ! -t 0 || logger() {
    local LEVEL="$5"
    local STAMP START END
    local LINE="$6"

    if test -t 2; then
        if [[ "$LEVEL" == 'crit' ]]; then
            START="${COLOR[LIGHT_RED]}"
            END="${COLOR[RESET]}"
        elif [[ "$LEVEL" == 'warning' ]]; then
            START="${COLOR[YELLOW]}"
            END="${COLOR[RESET]}"
        #elif [[ "$LEVEL" == 'notice' ]]; then
        #    START="${COLOR[LIGHT_GREEN]}"
        #    END="${COLOR[RESET]}"
        elif [[ "$LEVEL" == 'debug' ]]; then
            START="${COLOR[DARK_GRAY]}"
            END="${COLOR[RESET]}"
        fi
    fi

    test -z "$TIMESTAMP" || STAMP="$(date "+${DATE_FORMAT}") ${__COMMAND__}[$$]: "
    stderr "${STAMP}${START}${LINE}${END}"
}


# INT condition('when'|'unless', 'test'|'exec', ARGS*): VOID
# check ARGS* condition (test or exec) and return true (0) or false (1)
condition() {
    test $# -gt 0 || return 0

    local CONDITION="${1:-always}"
    local OPERATION="${2:-noop}"

    if ! shift 2; then
        error 'Insufficient number of parameters:'
        internal_error 255 "condition $*"
    elif [[ $# -eq 0 ]]; then
        error 'Empty conditions:'
        internal_error 255 "condition ${CONDITION} ${OPERATION}"
    fi

    case "$CONDITION" in
        'always') ;;
        'when'|'unless')
            case "$OPERATION" in
                'test')
                    test "$CONDITION" == 'when' || set -- ! "$@"
                    test "$@" || return 1
                    ;;
                'exec')
                    if [[ "$CONDITION" == 'when' ]]; then
                        "$@"
                    else
                        ! "$@"
                    fi &>/dev/null || return 1
                    ;;
                *)
                    error "Unknown operation \'${OPERATION}':"
                    internal_error 255 "condition ${CONDITION} ${OPERATION} $*"
                    ;;
            esac
            ;;
        *)
            error "Unknown condition \'${CONDITION}':"
            internal_error 255 "condition ${CONDITION} ${OPERATION} $*"
            ;;
    esac

    return 0
}


# INT syslog(LEVEL, MESSAGE, [CONDITIONS*]): VOID
# syslog wrapper (if CONDITIONS is true or VOID)
syslog() {
    local ERR=0
    local LEVEL="$1"
    local MESSAGE="$2"
    local CONDITION="${3:-always}"
    local OPERATION="${4:-noop}"
    shift 2

    condition "$@" || return 1

    while IFS='' read -r LINE; do
        test -n "$LINE" || continue
        logger --id=$$ -t "$__COMMAND__" -p "$LEVEL" "$LINE"
    done <<<"$MESSAGE"

    return 0
}


# logging messages
fatal() { syslog 'crit' "$@" && exit 255 || :; }
error() { syslog 'crit' "$@" || :; }
warn() { syslog 'warning' "$@" || :; }
notice() { syslog 'notice' "$@" || :; }
# FIXME: info syslog level not usable due to dhclient Spam
log() { syslog 'notice' "$@" || :; }
debug() { test -z "$DEBUG" || syslog 'debug' "$@" || :; }


# VOID internal_error(ERR, [BASH_COMMAND]): TRACEBACK
# stdout TRACEBACK for BASH_COMMAND that caused ERR exit code
internal_error() {
    local _ERR=${1:-0}
    test $_ERR -gt 0 || return

    local _BASH_COMMAND="${2:-$BASH_COMMAND}"
    local _TRACEBACK=('Traceback:')
    local IFS=$'\n'
    local i

    for ((i=${#BASH_SOURCE[@]}-2; i>=0; i--)); do
        _TRACEBACK+=("  File \"${BASH_SOURCE[i+1]}\", line ${BASH_LINENO[i]}, in ${FUNCNAME[i+1]}")
    done
    _TRACEBACK+=(
        "    Command: ${_BASH_COMMAND}"
        "    Exit code: ${_ERR}"
    )
    error "${_TRACEBACK[*]}"
    test $# -eq 1 || exit $_ERR
}


# INT cmd(CMD, ARGS*): VOID
# exec CMD with ARGS and log stdout/stderr
# return exitcode of CMD if NO_FAIL
cmd() {
    local _ERR=0
    local CMD=$1
    local ARGS=''
    local STDOUT STDERR

    # FIXME: is there a better method to preserve original quotes?
    shift
    for ARG in ${*@Q}; do
        [[ "$ARG" =~ ' ' ]] || ARG=${ARG:1:-1} && ARGS+=" ${ARG}"
    done
    debug "Executing: ${CMD}${ARGS}"

    # redirect STDOUT/STDERR to variables for logging
    exec 4<><(:) 5<><(:)
    $CMD "$@" 1>&4 2>&5 || _ERR=$?
    printf '\0' 1>&4
    printf '\0' 1>&5
    read -r -d '' -u 4 STDOUT
    read -r -d '' -u 5 STDERR
    exec 4>&- 5>&-

    log "$STDOUT"
    error "$STDERR"

    test $_ERR -eq 0 -o -n "$NO_FAIL" || internal_error $_ERR "${CMD}${ARGS}"
    return $_ERR
}


# INT cmd_no_fatal(CMD, ARGS*): VOID
# exec CMD with ARGS and log stdout/stderr
# return exitcode of CMD
cmd_no_fatal() {
    NO_FAIL=1 cmd "$@"
}


# VOID cmd_no_fail(CMD, ARGS*): VOID
# exec CMD with ARGS and log stdout/stderr
# do not return exitcode of CMD
cmd_no_fail() {
    NO_FAIL=1 cmd "$@" || :
}


# VOID trap_pid(VOID): VOID
# register and remove our presence in a PID file (global variable PID_FILE)
# during execution
trap_pid() {
    local PID
    if [[ -f "$PID_FILE" ]]; then
        PID=$(cat "$PID_FILE")
        fatal "${__COMMAND__}[${PID}]: already running" when exec kill -0 "$PID"
        warn "Replacing dead process ${__COMMAND__}[${PID}]"
    fi
    echo "$$" >"$PID_FILE"
    trap "rm -f '${PID_FILE}'" EXIT
}


# INT bool(VALUE): VOID
# return 0 (True) or 1 (False) if VALUE is boolean int/str
bool() {
    local VALUE="${1:-0}"
    case "${VALUE,,}" in
        '1'|'yes'|'true') return 0 ;;
        '0'|'no'|'false') return 1 ;;
        *) fatal "Boolean value \`${VALUE}' not allowed" ;;
    esac
}


# VOID set_status(STATE): VOID
# write STATE in a persistent status file
set_status() {
    local STATE="$1"
    local STATUS_FILE="${RUNSTATEDIR}/${__COMMAND__}.status"

    echo "$STATE" >"$STATUS_FILE"
}


# VOID get_status([COMMAND]): STATE
# stdout STATE from persistent COMMAND (or self) status file
get_status() {
    local COMMAND=${1:-$__COMMAND__}
    local STATUS_FILE="${RUNSTATEDIR}/${COMMAND}.status"

    if [[ -f "$STATUS_FILE" ]]; then
        cat "$STATUS_FILE"
    else
        echo 'STOPPED'
    fi
}


# VOID clear_status(VOID): VOID
# remove the persistent status file
clear_status() {
    rm -f "${RUNSTATEDIR}/${__COMMAND__}.status"
}


# VOID get_wan_status(PROVIDER): LOSS, RTT, STATE
# stdout PROVIDER status values
get_wan_status() {
    local PROVIDER=${1,,}
    local STATUS_FILE="${RUNSTATEDIR}/lb_${PROVIDER}.status"

    if [[ -f "$STATUS_FILE" ]]; then
        cat "$STATUS_FILE"
    else
        echo -e "${MAX_PACKET_LOSS}\t-\tDOWN"
    fi
}


# VOID set_wan_status(PROVIDER, LOSS, RTT, STATE): VOID
# write PROVIDER status in a persistent file
set_wan_status() {
    local PROVIDER=${1,,}
    local LOSS=${2:-$MAX_PACKET_LOSS}
    local RTT=${3:--}
    local STATE=${4:-DOWN}
    local STATUS_FILE="${RUNSTATEDIR}/lb_${PROVIDER}.status"

    # to avoid empty file read, first write a tmp file then replace it
    echo -e "${LOSS}\t${RTT}\t${STATE}" >"${STATUS_FILE}.tmp"
    mv -f "${STATUS_FILE}.tmp" "$STATUS_FILE"
}


# VOID get_eth_stats(ETHERNET): VOID
# set global variables:
# - epoch
# - rx_bytes
# - rx_packets
# - tx_bytes
# - tx_packets
get_eth_stats() {
    local ETHERNET="$1"
    local STATS_FILE="${RUNSTATEDIR}/lbw-${ETHERNET}.stats"

    fatal "Statistic file for ${ETHERNET} not present" unless test -f "$STATS_FILE"
    source "$STATS_FILE"
}


# VOID read_eth_stat(ETHERNET, STAT): VALUE
# stdout ETHERNET VALUE of STAT
read_eth_stat() {
    local ETHERNET="$1"
    local STAT="$2"

    cat "/sys/class/net/${ETHERNET}/statistics/${STAT}"
}


# VOID set_eth_stats(ETHERNET): VOID
# store ETHERNET stats in a persistent file:
# - epoch
# - rx_bytes
# - rx_packets
# - tx_bytes
# - tx_packets
set_eth_stats() {
    local ETHERNET="$1"
    local STATS_FILE="${RUNSTATEDIR}/lbw-${ETHERNET}.stats"
    local STATS=('rx_bytes' 'rx_packets' 'tx_bytes' 'tx_packets')

    debug "Store ${ETHERNET} statistics"
    {
        for STAT in ${STATS[@]}; do
            echo "${STAT}=$(cat "/sys/class/net/${ETHERNET}/statistics/${STAT}")"
        done
        echo "epoch=$(date +%s)"
    } >"$STATS_FILE"
}


# VOID clear_wan_status(PROVIDER): VOID
# remove the persistent stats file for PROVIDER
clear_wan_status() {
    local PROVIDER=${1,,}
    local STATUS_FILE="${RUNSTATEDIR}/lb_${PROVIDER}.status"

    test -f "$STATUS_FILE" && rm -f "$STATUS_FILE" || :
}


# VOID get_next_rule_priority(VOID): PRIORITY
# stdout iproute2 first empty PRIORITY
get_next_rule_priority() {
    local PRIORITY=$(ip rule show | tail -1 | awk -F: '{ print $1 }')
    echo $[PRIORITY+1]
}


# VOID get_last_lease(LEASE_FILE): LEASE
# stdout last "lease {...}" values from LEASE_FILE
get_last_lease() {
    local LEASE_FILE="$1"

    sed -e ':a;N;$!ba;s/\([{;]\)\n */\1/g' "$LEASE_FILE" \
    | sed -e 's/^lease {//' -e 's/;}$//' \
    | tail -1 \
    | tr ';' '\n'
}


# VOID get_lease_options(LEASE_FILE): OPTIONS
# stdout OPTION=VALUE tuple from LEASE_FILE
get_lease_options() {
    local LEASE_FILE="$1"

    awk '/option/{ print $2 "=" $3 }' <<<"$LEASE_FILE"
}


# VOID get_template(TEMPLATE): CONTENT
# stdout TEMPLATE with expanded variables
get_template() {
    local TEMPLATE="$1"
    local TEMPLATE_FILE="/usr/libexec/lb-wan/templates/${TEMPLATE}.in"
    local CONTENT
    local ERR=0

    fatal "Template file for \`${TEMPLATE}' not found" unless test -f "$TEMPLATE_FILE"
    read -d '' -r CONTENT <"$TEMPLATE_FILE" || ERR=$?
    fatal "Error while reading \`${TEMPLATE}' template" when test $ERR -ne 1
    echo "${CONTENT@P}"
}


# VOID get_nameservers(ETHERNET): NAMESERVERS
# stdout NAMESERVERS for ETHERNET
get_nameservers() {
    local ETHERNET="$1"

    case "$NETWORKING" in
        'ifupdown')
            ifquery "$ETHERNET" | awk -F': ' '/^dns-nameserver/{ print $2 }'
            ;;
    esac
}


# VOID read_rt_tables(VOID): TABLE
# stdout sorted pair of "INDEX NAME" of iproute2 rt_tables
read_rt_tables() {
    grep -Ehv '^$|^#' /etc/iproute2/rt_tables /etc/iproute2/rt_tables.d/*.conf 2>/dev/null \
    | sort -u \
    | awk '{ print $1 " " $2 }'
}


# VOID next_rt_table(VOID): INDEX
# stdout next free INDEX of non reserved values
next_rt_table() {
    local INDEX=0

    while read TABLE NAME; do
        test $TABLE -lt 253 -a $TABLE -le $INDEX || break
        INDEX=$[TABLE+1]
    done <<<"$RT_TABLES"

    fatal "No available free table space for iproute2 rt_tables (got ${INDEX})" when test $INDEX -gt 252

    echo "$INDEX"
}


# VOID if_managed(ETHERNET): NETWORKING
# check if interface is managed by the tool
if_managed() {
    local ETHERNET="$1"

    case "$NETWORKING" in
        'ifupdown') ( ifquery -l | grep -q "^${ETHERNET}$" ) && echo "$NETWORKING" || echo 'manual' ;;
        'netplan') test $(netplan get "ethernets.${ETHERNET}") != 'null' && echo "$NETWORKING" || echo 'manual' ;;
        *) echo 'manual' ;;
    esac
}


# VOID if_up(ETHERNET): VOID
# bring up ETHERNET ineterface
if_up() {
    local ETHERNET="$1"
    local NETWORKING=$(if_managed "$ETHERNET")

    case "$NETWORKING" in
        'ifupdown') cmd ifup "$ETHERNET" ;;
        'netplan')
            # TODO:
            # netplan get "ethernets.${ETHERNET}"
            # create /tmp/custom/etc/netplan
            # netplan apply --state /tmp/custom ???
            ;;
        'manual') warn "Unable to bring up ${ETHERNET} if NETWORKING='manual'" ;;
    esac
}


# VOID if_down(ETHERNET): VOID
# bring down ETHERNET ineterface
if_down() {
    local ETHERNET="$1"
    local NETWORKING=$(if_managed "$ETHERNET")

    case "$NETWORKING" in
        'ifupdown') cmd ifdown "$ETHERNET" ;;
        'netplan'|'manual')
            cmd ip link set dev "$ETHERNET" down
            cmd ip addr flush dev "$ETHERNET"
            ;;
    esac
}


# VOID stdout_to_var(VAR, FUNCTION, ARGS*): VOID
# store in VAR the stdout of FUNCTION(ARGS*) as an array of lines
stdout_to_var() {
    declare -n VAR="$1"
    local FUNCTION="$2"
    shift 2

    # FIXME: https://www.reddit.com/r/bash/comments/135mdqt/no_redirect_to_variable/
    # Is there something better to avoid subshell and preserve variables changes?
    exec 4<><(:)
    { $FUNCTION "$@"; printf '\0'; } 1>&4
    read -r -d '' -u 4 -a VAR
    exec 4>&-
}


# VOID init(VOID): VOID
init() {
    # track errors with line and command
    set -o errtrace -o errexit -o pipefail -o functrace
    trap 'internal_error $?' ERR

    # enable tracing to file
    if [[ "$TRACE" ]]; then
        eval "exec ${TRACE}>'${TRACE_FILE}'"
        BASH_XTRACEFD=$TRACE
        set -o xtrace
    fi

    # avoid multiple instances
    if PID=$(pidof -o $$ "$__COMMAND__"); then
        fatal "${__COMMAND__}[${PID// /,}]: already running"
    fi

    # identify networking
    if [[ "$NETWORKING" == 'auto' ]]; then
        if [[ -f /etc/network/interfaces && $(type -ft ifquery) == 'file' ]] && ifquery --state &>/dev/null; then
            NETWORKING=ifupdown
        elif [[ -d /etc/netplan && $(type -ft netplan) == 'file' ]] && netplan status &>/dev/null; then
            NETWORKING=netplan
        fi
    fi
    if [[ "$NETWORKING" == 'ifupdown' ]]; then
        fatal "\`ifupdown' tool not found, change NETWORKING in /etc/default/lb-wan.conf" unless test $(type -ft ifquery) == 'file'
        fatal "\`ifupdown' not configured" unless exec ifquery --state
    elif [[ "$NETWORKING" == 'netplan' ]]; then
        fatal "\`netplan' tool not found, change NETWORKING in /etc/default/lb-wan.conf" unless test $(type -ft netplan) == 'file'
        fatal "\`netplan' not configured" unless exec netplan get
    elif [[ "$NETWORKING" != 'manual' ]]; then
        fatal 'Unsupported network configuration tool'
    fi

    # load config file
    fatal "Config file \`${WAN_BALANCER_CONF}' not present" unless test -f "$WAN_BALANCER_CONF"
    WAN_CONF=$(grep -vE '^$|^#|^LAN' "$WAN_BALANCER_CONF")
    fatal "Config file \`${WAN_BALANCER_CONF}' is empty" when test -z "$WAN_CONF"
    LAN_INT=$(awk '/^LAN[[:space:]]/{ print $2 }' "$WAN_BALANCER_CONF")
    if [[ "$LAN_INT" ]]; then
        LAN_NET=$(ip route show dev "$LAN_INT" scope link | awk '{ print $1 }')
        LAN_DNS=($(get_nameservers "$LAN_INT"))
    fi

    # normalize DNS
    : ${NAMESERVERS:="${LAN_DNS[@]}"}
    : ${NAMESERVERS:='8.8.8.8,8.8.4.4'}
    NAMESERVERS=($(tr ':;,' ' ' <<<"$NAMESERVERS"))
    NAMESERVERS="${NAMESERVERS[@]}"
    NAMESERVERS="${NAMESERVERS// /, }"

    # load rt_tables
    RT_TABLES=$(read_rt_tables)
}

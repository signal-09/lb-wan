#!/bin/bash

set -eo pipefail

# load shared components
SCRIPT=$(realpath -- "${BASH_SOURCE[0]}")
LIBDIR=$(dirname -- "$SCRIPT")
COMMON="${LIBDIR}/common.sh"
source "$COMMON" || exit 255


HELP="Usage: ${SCRIPT} [OPTIONS] OBJECT { COMMAND | help }
OBJECT := { status | service | wan | help }
OPTIONS:
    -h, --help           Show this help
    -d, --debug          Run in debug mode (implies -f)
    -f, --foreground     Run in foreground mode
    -t, --timestamp      Print timestamp in log lines
        --trace[=FILE]   Print executed commands in a .trace file"


do_help() {
    echo "$HELP"
    exit
}


do_usage() {
    log "$HELP"
    exit 255
}


list_service_status() {
    echo "Services:"
    do_service_list "$@" | while read LINE; do
        echo "- ${LINE}"
    done
}


list_wan_status() {
    echo "WANs:"
    do_wan_list "$@" | while read LINE; do
        echo "- ${LINE}"
    done
}


do_status() {
    list_service_status
    list_wan_status
}


## SERVICES

get_service_pid() {
    local SERVICE=${1,,}
    local PID_FILE="${RUNSTATEDIR}/lbw-${SERVICE}.pid"

    if [[ -f "$PID_FILE" ]]; then
        local PID=$(cat "$PID_FILE")
        if ! kill -0 $PID &>/dev/null; then
            echo -e "${COLOR[LIGHT_RED]}${PID}${COLOR[RESET]}"
        else
            local PARENT=$(awk -F ':[[:space:]]+' '/PPid:/{ print $2 }' /proc/${PID}/status)
            if [[ $PARENT -eq 1 ]]; then
                echo -e "${COLOR[LIGHT_GREEN]}${PID}${COLOR[RESET]}"
            else
                echo -e "${COLOR[YELLOW]}${PID}${COLOR[RESET]}"
            fi
        fi
    fi
}


get_service_status() {
    local SERVICE=${1,,}
    local STATUS=$(systemctl is-active lbw-${SERVICE})

    case "$STATUS" in
    'active')
        STATUS="${COLOR[LIGHT_GREEN]}${STATUS}${COLOR[RESET]}"
        ;;
    'failed')
        STATUS="${COLOR[LIGHT_RED]}${STATUS}${COLOR[RESET]}"
        ;&
    'inactive')
        if PID=$(pidof -x -o $$ "lbw-${SERVICE}"); then
            STATUS="${COLOR[YELLOW]}running${COLOR[RESET]}"
        fi
        ;;
    esac

    echo -e "$STATUS"
}


get_service_enabled() {
    local SERVICE=${1,,}
    local STATUS=$(systemctl is-enabled lbw-${SERVICE})

    case "$STATUS" in
    'enabled')
        STATUS="${COLOR[LIGHT_GREEN]}${STATUS}${COLOR[RESET]}"
        ;;
    'disabled')
        STATUS="${COLOR[YELLOW]}${STATUS}${COLOR[RESET]}"
        ;;
    esac

    echo -e "$STATUS"
}


do_service_list() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        local PID=$(get_service_pid "${SERVICE}")
        echo "${SERVICE}${PID:+[${PID}]}: $(get_service_status "${SERVICE}") ($(get_service_enabled "$SERVICE"))"
    done
}


do_service_start() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    if [[ "$FOREGROUND" ]]; then
        test $# -eq 1 || fatal "Only one service at a time are allowed in foreground"
        SERVICE=${1,,}
        exec -a "lbw-${SERVICE}" "${LIBDIR}/lbw-${SERVICE}"
    fi

    for SERVICE; do
        systemctl start lbw-${SERVICE,,}
    done
}


do_service_stop() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        systemctl stop lbw-${SERVICE,,}
    done
}


do_service_enable() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        systemctl enable lbw-${SERVICE,,}
    done
}


do_service_disable() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        systemctl disable lbw-${SERVICE,,}
    done
}


do_service_status() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        systemctl status lbw-${SERVICE,,} || :
    done
}


do_service() {
    local SERVICE
    local CMD='list'
    local HELP="Usage: ${SCRIPT} service { COMMAND }
COMMAND:
    help                          Show this help
    list                          List services and brief status
    start [ SERVICE... | all ]    Start services
    stop [ SERVICE... | all ]     Stop services
    restart [ SERVICE... | all ]  Restart services
    status [ SERVICE... | all ]   Display status of services
    enable                        Enable LB-Wan services to be started at boot
    disable                       Disable LB-Wan services to be started at boot
SERVICE:
    VRF                           Virtual Routing and Forwarding service
    Balancer                      Balancer service"

    if [[ $# -gt 0 ]]; then
        CMD=$1
        shift
    fi

    for SERVICE in "$@"; do
        case "${SERVICE,,}" in
        'vrf'|'balancer');;
        'all') test $# -eq 1 || fatal "\`all' meta service cannot be mixed with other services";;
        *) fatal "Service \`${SERVICE}' is unknown, try \`${SCRIPT} service help'";;
        esac
    done

    if [[ x'list' == x${CMD}* ]]; then
        do_service_list "$@"
    elif [[ x'start' == x${CMD} ]]; then
        do_service_start "$@"
    elif [[ x'stop' == x${CMD} ]]; then
        do_service_stop "$@"
    elif [[ x'restart' == x${CMD}* ]]; then
        do_service_stop "$@" && do_service_start "$@"
    elif [[ x'status' == x${CMD} ]]; then
        do_service_status "$@"
    elif [[ x'enable' == x${CMD}* ]]; then
        do_service_enable "$@"
    elif [[ x'disable' == x${CMD}* ]]; then
        do_service_disable "$@"
    elif [[ x'help' == x${CMD}* ]]; then
        do_help
    else
        fatal "Command \`${CMD}' is unknown, try \`${SCRIPT} service help'"
    fi
}


## WAN

color_state() {
    declare -A C=( [UP]=${COLOR[LIGHT_GREEN]} [DOWN]=${COLOR[LIGHT_RED]} )

    echo -e "${C[$1]}$1${COLOR[RESET]}"
}


color_loss() {
    local LOSS=$1
    local C='LIGHT_RED'

    if [[ $LOSS -eq 0 ]]; then
        C='GREEN'
    elif [[ $LOSS -lt $MAX_PACKET_LOSS ]]; then
        C='YELLOW'
    fi

    echo -e "${COLOR[$C]}${LOSS}${COLOR[RESET]}"
}


do_wan_list() {
    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        local TABLE_NAME=${PROVIDER,,}
        read LOSS RTT STATE < <(get_wan_status "$PROVIDER")
        echo "${PROVIDER}: $(color_state "$STATE") (failures: $(color_loss "$LOSS"), latency: ${RTT})"
    done <<<"$WAN_CONF"
}


do_wan() {
    local CMD='list'
    local HELP="Usage: ${SCRIPT} wan { COMMAND }
COMMAND:
    help               Show this help
    list               List WANs and brief status"

    if [[ $# -gt 0 ]]; then
        CMD=$1
        shift
    fi

    if [[ x'list' == x${CMD}* ]]; then
        do_wan_list "$@"
    else
        fatal "Command \`${CMD}' is unknown, try \`${SCRIPT} wan help'"
    fi
}


# parse command options
OPTS=$(getopt -o hdft --long help,debug,foreground,timestamp,trace:: -q -- "$@") || fatal "Unrecognized options"
eval set -- "$OPTS"
unset OPTS

while [[ $# -gt 0 ]]; do
    case "$1" in
    -h|--help) do_help;;
    -d|--debug) export DEBUG=1;&
    -f|--foregraund) export FOREGROUND=1;;
    -t|--timestamp) export TIMESTAMP=1;;
    --trace)
        export TRACE=3
        test -z "$2" || export TRACE_FILE="$2"
        shift
        ;;
    --) shift; break;;
    *) fatal "Unrecognized option \`$1'";;
    esac
    shift
done

test $# -gt 0 || do_usage

OBJ=$1
shift

if [[ x'status' == x${OBJ}* ]]; then
    do_status "$@"
elif [[ x'service' == x${OBJ}* ]]; then
    do_service "$@"
elif [[ x'wan' == x${OBJ}* ]]; then
    do_wan "$@"
elif [[ x'help' == x${OBJ}* ]]; then
    do_help
else
    fatal "Object \`${OBJ}' is unknown, try \`${SCRIPT} help'"
fi

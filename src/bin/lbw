#!/bin/bash

# load shared components
SCRIPT=$(realpath "$0")
LIBDIR=$(dirname "$SCRIPT")
COMMON="${LIBDIR}/common.sh"
source "$COMMON" || exit 255


HELP="Usage: ${__COMMAND__} [OPTIONS] OBJECT { COMMAND | help }
OBJECT := { status | service | wan | balancer | help }
OPTIONS:
    -h, --help             Show this help
    -d, --debug            Run in debug mode (implies -f)
    -f, --foreground       Run in foreground mode
    -t, --timestamp        Print timestamp in log lines
    -h, --human-readable   Print sizes in human readable format (e.g., 1KB 2GiB)
        --trace[=FILE]     Print executed commands in a .trace file"


do_help() {
    echo "$HELP"
    exit 0
}


do_usage() {
    log "$HELP"
    exit 255
}


list_service_status() {
    echo "Services:"
    do_service_list | while read LINE; do
        echo "- ${LINE}"
    done
}


list_wan_status() {
    echo "WANs:"
    do_wan_list | while read LINE; do
        echo "- ${LINE}"
    done
}


do_status() {
    list_service_status
    list_wan_status
}


## SERVICES

# VOID get_service_pid(SERVICE): PID
# stdout PID of SERVICE
get_service_pid() {
    local SERVICE=${1,,}
    local PID_FILE="${RUNSTATEDIR}/lbw-${SERVICE}.pid"

    if [[ -f "$PID_FILE" ]]; then
        local PID=$(cat "$PID_FILE")
        if ! kill -0 $PID &>/dev/null; then
            echo -e "${COLOR[LIGHT_RED]}${PID}${COLOR[RESET]}"
        else
            local PARENT=$(awk -F ':[[:space:]]+' '/PPid:/{ print $2 }' /proc/${PID}/status)
            if [[ $PARENT -eq 1 ]]; then
                echo -e "${COLOR[LIGHT_GREEN]}${PID}${COLOR[RESET]}"
            else
                echo -e "${COLOR[YELLOW]}${PID}${COLOR[RESET]}"
            fi
        fi
    fi
}


# VOID get_service_status(SERVICE): STATUS
# stdout running STATUS of SERVICE
get_service_status() {
    local SERVICE=${1,,}
    local STATUS=$(systemctl is-active lbw-${SERVICE} || :)

    case "$STATUS" in
    'active')
        STATUS="${COLOR[LIGHT_GREEN]}${STATUS}${COLOR[RESET]}"
        ;;
    'failed')
        STATUS="${COLOR[LIGHT_RED]}${STATUS}${COLOR[RESET]}"
        ;&
    'inactive')
        if PID=$(pidof -x -o $$ "lbw-${SERVICE}"); then
            STATUS="${COLOR[YELLOW]}running${COLOR[RESET]}"
        fi
        ;;
    esac

    echo -e "$STATUS"
}


# VOID get_service_enabled(SERVICE): STATUS
# stdout enabled STATUS of SERVICE
get_service_enabled() {
    local SERVICE=${1,,}
    local STATUS=$(systemctl is-enabled lbw-${SERVICE} || :)

    case "$STATUS" in
    'enabled')
        STATUS="${COLOR[LIGHT_GREEN]}${STATUS}${COLOR[RESET]}"
        ;;
    'disabled')
        STATUS="${COLOR[YELLOW]}${STATUS}${COLOR[RESET]}"
        ;;
    esac

    echo -e "$STATUS"
}


# VOID do_service_list(VOID): STATUS
# stdout verbose STATUS of all services
do_service_list() {
    local SERVICE

    for SERVICE in 'VRF' 'Balancer'; do
        local PID=$(get_service_pid "${SERVICE}")
        echo "${SERVICE}${PID:+[${PID}]}: $(get_service_status "${SERVICE}") ($(get_service_enabled "$SERVICE"))"
    done
}


# VOID do_service_start(ARGS*): VOID
# start ARGS services (or all services if ARGS is omitted)
do_service_start() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    if [[ "$FOREGROUND" ]]; then
        test $# -eq 1 || fatal "Only one service at a time are allowed in foreground"
        SERVICE=${1,,}
        exec -a "lbw-${SERVICE}" "${__DIR__}/lbw-${SERVICE}"
    fi

    for SERVICE; do
        systemctl start lbw-${SERVICE,,}
    done
}


# VOID do_service_stop(ARGS*): VOID
# stop ARGS services (or all services if ARGS is omitted)
do_service_stop() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        systemctl stop lbw-${SERVICE,,}
    done
}


# VOID do_service_enable(ARGS*): VOID
# enable ARGS services (or all services if ARGS is omitted)
do_service_enable() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        systemctl enable lbw-${SERVICE,,}
    done
}


# VOID do_service_disable(ARGS*): VOID
# disable ARGS services (or all services if ARGS is omitted)
do_service_disable() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        systemctl disable lbw-${SERVICE,,}
    done
}


# VOID do_service_status(ARGS*): STATUS
# show ARGS services status (or all services if ARGS is omitted)
do_service_status() {
    local SERVICE

    [[ $# -gt 0 && ${1,,} != 'all' ]] || set -- 'VRF' 'Balancer'

    for SERVICE; do
        systemctl status lbw-${SERVICE,,} || :
    done
}


# VOID do_service(ARGS*): VOID
# exec service specific command ('list' if ARGS is omitted)
do_service() {
    local CMD='list'
    local HELP="Usage: ${__COMMAND__} service { COMMAND }
COMMAND:
    help                          Show this help
    list                          List services and brief status
    start [ SERVICE... | all ]    Start services
    stop [ SERVICE... | all ]     Stop services
    restart [ SERVICE... | all ]  Restart services
    status [ SERVICE... | all ]   Display status of services
    enable                        Enable LB-Wan services to be started at boot
    disable                       Disable LB-Wan services to be started at boot
SERVICE:
    VRF                           Virtual Routing and Forwarding service
    Balancer                      Balancer service"

    test $# -eq 0 || { CMD=$1 && shift; }

    local SERVICE
    for SERVICE in "$@"; do
        case "${SERVICE,,}" in
        'vrf'|'balancer');;
        'all') test $# -eq 1 || fatal "\`all' meta service cannot be mixed with other services";;
        *) fatal "Service \`${SERVICE}' is unknown, try \`${__COMMAND__} service help'";;
        esac
    done

    if [[ x'list' == x${CMD}* ]]; then
        test $# -eq 0 || fatal "garbage command options \`$*'"
        do_service_list
    elif [[ x'start' == x${CMD} ]]; then
        do_service_start "$@"
    elif [[ x'stop' == x${CMD} ]]; then
        do_service_stop "$@"
    elif [[ x'restart' == x${CMD}* ]]; then
        do_service_stop "$@" && do_service_start "$@"
    elif [[ x'status' == x${CMD} ]]; then
        do_service_status "$@"
    elif [[ x'enable' == x${CMD}* ]]; then
        do_service_enable "$@"
    elif [[ x'disable' == x${CMD}* ]]; then
        do_service_disable "$@"
    elif [[ x'help' == x${CMD}* ]]; then
        do_help
    else
        fatal "Command \`${CMD}' is unknown, try \`${__COMMAND__} service help'"
    fi
}


## WAN

color_state() {
    declare -A C=( [UP]=${COLOR[LIGHT_GREEN]} [DOWN]=${COLOR[LIGHT_RED]} )

    echo -e "${C[$1]}$1${COLOR[RESET]}"
}


color_loss() {
    local LOSS=$1
    local C='LIGHT_RED'

    if [[ $LOSS -eq 0 ]]; then
        C='GREEN'
    elif [[ $LOSS -lt $MAX_PACKET_LOSS ]]; then
        C='YELLOW'
    fi

    echo -e "${COLOR[$C]}${LOSS}${COLOR[RESET]}"
}


do_wan_list() {
    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        local TABLE_NAME=${PROVIDER,,}
        read LOSS RTT STATE < <(get_wan_status "$PROVIDER")
        echo "${PROVIDER}: $(color_state "$STATE") (weight: ${WEIGHT}, failures: $(color_loss "$LOSS"), latency: ${RTT})"
    done <<<"$WAN_CONF"
}


# VOID do_wan(ARGS*): VOID
# exec WAN specific command ('list' if ARGS is omitted)
do_wan() {
    local CMD='list'
    local HELP="Usage: ${__COMMAND__} wan { COMMAND }
COMMAND:
    help               Show this help
    list               List WANs and brief status"

    test $# -eq 0 || { CMD=$1 && shift; }

    if [[ x'list' == x${CMD}* ]]; then
        test $# -eq 0 || fatal "garbage command options \`$*'"
        do_wan_list
    elif [[ x'help' == x${CMD}* ]]; then
        do_help
    else
        fatal "Command \`${CMD}' is unknown, try \`${__COMMAND__} wan help'"
    fi
}


## Balancer

do_balancer_stats_show() {
    local OUT=('Service:Weight:RX Bytes:RX Pkts:TX Bytes:TX Pkts:Total Bytes:Total Pkts')
    local TOT=(0 0 0 0 0 0)
    local EPOCH=$(date +%s)
    declare -A VAL

    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        local rx_bytes rx_packets tx_bytes tx_packets
        local RX_BYTES RX_PACKETS TX_BYTES TX_PACKETS
        local STATS=('rx_bytes' 'rx_packets' 'tx_bytes' 'tx_packets')

        get_eth_stats "$ETHERNET"

        # get the smallest epoch within providers
        [[ $epoch -ge $EPOCH ]] || EPOCH=$epoch

        for STAT in ${STATS[@]}; do
            read ${STAT^^} <<<$[$(read_eth_stat "$ETHERNET" "$STAT") - ${!STAT}]
        done

        local B_T=$[RX_BYTES+TX_BYTES]
        local P_T=$[RX_PACKETS+TX_PACKETS]

        TOT=($[${TOT[0]}+$RX_BYTES] $[${TOT[1]}+$RX_PACKETS] $[${TOT[2]}+$TX_BYTES] $[${TOT[3]}+$TX_PACKETS] $[${TOT[4]}+$B_T] $[${TOT[5]}+$P_T])
        VAL[$PROVIDER]="$RX_BYTES:$RX_PACKETS:$TX_BYTES:$TX_PACKETS:$B_T:$P_T"
        if [[ "$HUMAN" ]]; then
            RX_BYTES="$(numfmt --to=iec-i "$RX_BYTES")B"
            RX_PACKETS="$(numfmt --to=si "$RX_PACKETS")"
            TX_BYTES="$(numfmt --to=iec-i "$TX_BYTES")B"
            TX_PACKETS="$(numfmt --to=si "$TX_PACKETS")"
            B_T="$(numfmt --to=iec-i "$B_T")B"
            P_T="$(numfmt --to=si "$P_T")"
        fi
        OUT+=("${PROVIDER}:${WEIGHT}:${RX_BYTES}:${RX_PACKETS}:${TX_BYTES}:${TX_PACKETS}:${B_T}:${P_T}")
    done <<<"$WAN_CONF"

    local PER=('' '' '' '' '' '' '' '')
    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        PER[0]="${PER[0]:+${PER[0]}/}%"
        for ((i=0;i<${#TOT[@]};i++)); do
            IFS=':' read -r -a V <<<"${VAL[$PROVIDER]}"
            PER[$i+2]="${PER[i+2]:+${PER[i+2]}/}$((${V[i]}*100/${TOT[i]}))"
        done
    done <<<"$WAN_CONF"

    if [[ "$HUMAN" ]]; then
        TOT[0]="$(numfmt --to=iec-i "${TOT[0]}")B"
        TOT[1]="$(numfmt --to=si "${TOT[1]}")"
        TOT[2]="$(numfmt --to=iec-i "${TOT[2]}")B"
        TOT[3]="$(numfmt --to=si "${TOT[3]}")"
        TOT[4]="$(numfmt --to=iec-i "${TOT[4]}")B"
        TOT[5]="$(numfmt --to=si "${TOT[5]}")"
    fi
    OUT+=($(IFS=':'; echo "${PER[*]}"))
    OUT+=('TOTAL::'$(IFS=':'; echo "${TOT[*]}"))

    column -t -s ':' <(IFS=$'\n'; echo "${OUT[*]}")

    local ELAPSED=$[$(date +%s)-EPOCH]
    local DAYS=$[ELAPSED/60/60/24]
    echo "Elapsed time: ${DAYS} days, $(date -ud "@${ELAPSED}" +%X)"
}


do_balancer_stats_reset() {
    (IFS='|'; [[ $# -gt 0 && ! "|${*,,}|" =~ '|all|' ]]) || set --

    while read PROVIDER ETHERNET WEIGHT PING_IPS; do
        for ARG; do [[ ${PROVIDER,,} == ${ARG,,} || ${ETHERNET,,} == ${ARG,,} ]] || continue 2; done
        set_eth_stats "$ETHERNET"
    done <<<"$WAN_CONF"
}


do_balancer_stats() {
    local CMD='show'
    local HELP="Usage: ${__COMMAND__} balancer stats { COMMAND }
COMMAND:
    help               Show this help
    show               Show balancer statistics
    reset              Reset ethernet counters"

    test $# -eq 0 || { CMD=$1 && shift; }

    if [[ x'show' == x${CMD}* ]]; then
        do_balancer_stats_show "$@"
    elif [[ x'reset' == x${CMD}* ]]; then
        do_balancer_stats_reset "$@"
    elif [[ x'help' == x${CMD}* ]]; then
        do_help
    else
        fatal "Command \`${CMD}' is unknown, try \`${__COMMAND__} balancer stats help'"
    fi
}


do_balancer() {
    local CMD='stats'
    local HELP="Usage: ${__COMMAND__} balancer { COMMAND }
COMMAND:
    help               Show this help
    stats|statistics   Balancer statistics"

    test $# -eq 0 || { CMD=$1 && shift; }

    if [[ x'stats' == x${CMD}* || x'statistics' == x${CMD}* ]]; then
        do_balancer_stats "$@"
    elif [[ x'help' == x${CMD}* ]]; then
        do_help
    else
        fatal "Command \`${CMD}' is unknown, try \`${__COMMAND__} balancer help'"
    fi
}


# parse command options
OPTS=$(getopt -o hdftH --long help,debug,foreground,timestamp,human-readable,trace:: -q -- "$@") || fatal "Unrecognized options"
eval set -- "$OPTS"
unset OPTS

while [[ $# -gt 0 ]]; do
    case "$1" in
    -h|--help) do_help;;
    -d|--debug) export DEBUG=1;&
    -f|--foregraund) export FOREGROUND=1;;
    -t|--timestamp) export TIMESTAMP=1;;
    -H|--human-readable) export HUMAN=1;;
    --trace)
        export TRACE=3
        test -z "$2" || export TRACE_FILE="$2"
        shift
        ;;
    --) shift; break;;
    *) fatal "Unrecognized option \`$1'";;
    esac
    shift
done

test $# -gt 0 || do_usage

OBJ=$1 && shift

if [[ x'status' == x${OBJ}* ]]; then
    do_status "$@"
elif [[ x'service' == x${OBJ}* ]]; then
    do_service "$@"
elif [[ x'wan' == x${OBJ}* ]]; then
    do_wan "$@"
elif [[ x'balancer' == x${OBJ}* ]]; then
    do_balancer "$@"
elif [[ x'help' == x${OBJ}* ]]; then
    do_help
else
    fatal "Object \`${OBJ}' is unknown, try \`${__COMMAND__} help'"
fi
